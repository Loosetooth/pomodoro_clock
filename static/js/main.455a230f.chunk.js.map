{"version":3,"sources":["components/timelabel/timelabel.js","components/pomodoro/pomodoro.js","serviceWorker.js","store.js","index.js"],"names":["TimeLabel","props","visualizeMinutes","bind","visualizeSeconds","fontSize","number","toString","this","visualizeNumber","minutes","seconds","style","fontFamily","Component","Pomodoro","observer","reset","incrementBreak","decrementBreak","incrementSession","decrementSession","startStop","calcTimeLeftMinutesSeconds","calcTimeLeft","countDown","generateTimerLabel","buttonVariant","setInterval","store","break","session","isStarted","isPaused","isSession","alarm","document","getElementById","pause","currentTime","timeLeftSeconds","Math","floor","play","id","Button","variant","onClick","preload","src","Boolean","window","location","hostname","match","Store","decorate","observable","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.455a230f.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\n\nexport class TimeLabel extends Component {\n    constructor(props){\n        super(props);\n        this.visualizeMinutes = this.visualizeMinutes.bind(this);\n        this.visualizeSeconds = this.visualizeSeconds.bind(this);\n        this.fontSize = this.props.fontSize ? this.props.fontSize : \"30px\";\n    }\n    visualizeNumber(number){\n        if(number>=10){\n            return number.toString();\n        } else {\n            return \"0\" + number.toString();\n        }\n    }\n    visualizeMinutes(){\n        return this.visualizeNumber(this.props.minutes);\n    }\n    visualizeSeconds(){\n        return this.visualizeNumber(this.props.seconds);\n    }\n    render(){\n        return <label style={{fontFamily: 'digital-clock-font', fontSize: this.fontSize}}>{this.visualizeMinutes()}:{this.visualizeSeconds()}</label>\n    }\n}","import React from 'react';\nimport { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport {observer} from 'mobx-react';\nimport {TimeLabel} from '../timelabel/timelabel'\nimport \"./pomodoro.css\";\n\nimport { CaretDownSquareFill, CaretUpSquareFill, ArrowClockwise, PlayFill, PauseFill } from 'react-bootstrap-icons';\n\n\nexport const Pomodoro = observer(class Pomodoro extends Component {\n    constructor(props){\n        super(props);\n        this.reset = this.reset.bind(this);\n        this.incrementBreak = this.incrementBreak.bind(this);\n        this.decrementBreak = this.decrementBreak.bind(this);\n        this.incrementSession = this.incrementSession.bind(this);\n        this.decrementSession = this.decrementSession.bind(this);\n        this.startStop = this.startStop.bind(this);\n        this.calcTimeLeftMinutesSeconds = this.calcTimeLeftMinutesSeconds.bind(this);\n        this.calcTimeLeft = this.calcTimeLeft.bind(this);\n        this.countDown = this.countDown.bind(this);\n        this.generateTimerLabel = this.generateTimerLabel.bind(this)\n        this.buttonVariant = \"dark\";\n    }\n    componentDidMount(){\n        setInterval(this.countDown, 1000);\n    }\n    decrementBreak(){\n        if(this.props.store.break > 1){\n            this.props.store.break -= 1;\n        }\n    }\n    incrementBreak(){\n        if(this.props.store.break < 60){\n            this.props.store.break += 1;\n        }\n        \n    }\n    incrementSession(){\n        if(this.props.store.session < 60 ){\n            this.props.store.session += 1;\n        }\n    }\n    decrementSession(){\n        if(this.props.store.session > 1){\n            this.props.store.session -= 1;\n        }\n    }\n    reset() {\n        this.props.store.session = 25;\n        this.props.store.break = 5;\n        this.props.store.isStarted = false;\n        this.props.store.isPaused = true;\n        this.props.store.isSession = true;\n        let alarm = document.getElementById(\"beep\");\n        alarm.pause();\n        alarm.currentTime = 0;\n    }\n    startStop() {\n        if(!this.props.store.isStarted) {\n            this.props.store.isStarted = true;\n            this.calcTimeLeft();\n        }\n        this.props.store.isPaused = !this.props.store.isPaused;\n    }\n    calcTimeLeft(){\n        // Calculate total amount of seconds to count down\n        if(this.props.store.isSession){\n            this.props.store.timeLeftSeconds = 60 * this.props.store.session;\n        } else {\n            this.props.store.timeLeftSeconds = 60 * this.props.store.break;\n        }\n    }\n    calcTimeLeftMinutesSeconds(){\n        let minutes = 0;\n        let seconds = 0;\n\n        if(this.props.store.isStarted){\n            minutes = Math.floor(this.props.store.timeLeftSeconds / 60);\n            seconds = this.props.store.timeLeftSeconds - minutes * 60;\n        } else {\n            minutes = this.props.store.session;\n        }\n\n        return {\n            minutes: minutes,\n            seconds: seconds\n        };\n    }\n    countDown(){\n        if(this.props.store.isStarted && !this.props.store.isPaused){\n            if(this.props.store.timeLeftSeconds > 0){\n                this.props.store.timeLeftSeconds -= 1;\n            } else {\n                // Toggle break/session\n                this.props.store.isSession = !this.props.store.isSession;\n                this.calcTimeLeft();\n                let alarm = document.getElementById(\"beep\");\n                alarm.play();\n            }\n        }\n    }\n    generateTimerLabel() {\n        if(this.props.store.isSession){\n            return \"Session\";\n        }else {\n            return \"Break\";\n        }\n    }\n    render() {\n        return <div id=\"pomodoro\">\n            <h1>Pomodoro Clock</h1>\n            <div id=\"session-break\">\n                <div id=\"break\">\n                    <p id=\"break-label\">Break Length</p>\n                    <Button variant={this.buttonVariant} id=\"break-decrement\" onClick={this.decrementBreak}><CaretDownSquareFill /></Button>\n                    <TimeLabel id=\"break-length\" minutes={this.props.store.break} seconds={0}></TimeLabel>\n                    <Button variant={this.buttonVariant} id=\"break-increment\" onClick={this.incrementBreak}><CaretUpSquareFill /></Button>\n                </div>\n                <div id=\"session\">\n                    <p id=\"session-label\">Session Length</p>\n                    <Button variant={this.buttonVariant} id=\"session-decrement\" onClick={this.decrementSession}><CaretDownSquareFill /></Button>\n                    <TimeLabel id=\"session-length\" minutes={this.props.store.session} seconds={0}>{this.props.store.session}</TimeLabel>\n                    <Button variant={this.buttonVariant} id=\"session-increment\" onClick={this.incrementSession}><CaretUpSquareFill /></Button>\n                </div>\n            </div>\n            <div id=\"timer-div\">\n                <div id=\"timer\">\n                    <label id=\"timer-label\">{this.generateTimerLabel()}</label>\n                    <TimeLabel id=\"time-left\" fontSize=\"50px\" minutes={this.calcTimeLeftMinutesSeconds().minutes} seconds={this.calcTimeLeftMinutesSeconds().seconds}></TimeLabel>\n                    <Button variant={this.buttonVariant} id=\"start_stop\" onClick={this.startStop}><PlayFill/><PauseFill/></Button>\n                    <Button variant={this.buttonVariant} id=\"reset\" onClick={this.reset}><ArrowClockwise /></Button>\n                </div>\n\n            </div>\n            <audio id=\"beep\" preload=\"auto\" src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"></audio>\n        </div>;\n    }\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {decorate, observable} from \"mobx\"\n\nclass Store {\n    break = 5;\n    session = 25;\n    timeLeftSeconds = 0;\n    isSession = true;\n    isStarted = false;\n    isPaused = true;\n}\n\ndecorate(Store, {\n    break: observable,\n    session: observable,\n    timeLeftSeconds: observable,\n    isSession: observable,\n    isStarted: observable,\n    isPaused: observable,\n});\n\nexport const store = new Store();","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Pomodoro } from './components/pomodoro/pomodoro';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pomodoro store={store}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}